/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.Color;
import java.awt.Font;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import triqui.TriquiPlayerGame;

/**
 *
 * @author Santiago
 */
public class GameRoom extends javax.swing.JFrame {

    private static final int EMPTY_CELL = 0;
    private static final int X_CELL = 1;
    private static final int O_CELL = 2;
    
    private String player1;
    private String player2;
    private int [][] board;
    private JLabel [][] boardLabels;
    private TriquiPlayerGame triqui;
    
    private Thread participantsUpdateThread;
    private Thread boardUpdateThread;
    private Thread turnUpdateThread;
    private boolean participantsThreadStopped;
    private boolean boardThreadStopped;
    private boolean turnThreadStopped;
    
    public GameRoom(TriquiPlayerGame triqui) {
        initComponents();
        board = new int[3][3];
        boardLabels = new JLabel[3][3];
        setLabelToMatrix();
        this.triqui = triqui;
        participantsThreadStopped = false;
        boardThreadStopped = false;
        turnThreadStopped = false;
    }
    
    private void setLabelToMatrix() {
        boardLabels[0][0] = boardPos1; boardLabels[0][1] = boardPos2;
        boardLabels[0][2] = boardPos3; boardLabels[1][0] = boardPos4;
        boardLabels[1][1] = boardPos5; boardLabels[1][2] = boardPos6;
        boardLabels[2][0] = boardPos7; boardLabels[2][1] = boardPos8;
        boardLabels[2][2] = boardPos9;
    }

    private void drawBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == EMPTY_CELL) {
                    //boardLabels[i][j].setText(" ");
                    ImageIcon image = new ImageIcon(getClass()
                        .getResource("/resources/emptyttt_opt.png"));
                    boardLabels[i][j].setIcon(image);
                }
                if (board[i][j] == X_CELL) {
                    //boardLabels[i][j].setText("X");
                    ImageIcon image = new ImageIcon(getClass()
                        .getResource("/resources/exttt_opt.png"));
                    boardLabels[i][j].setIcon(image);
                }
                if (board[i][j] == O_CELL) {
                    ImageIcon image = new ImageIcon(getClass()
                        .getResource("/resources/circlettt_opt.png"));
                    boardLabels[i][j].setIcon(image);
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        boardPanel = new javax.swing.JPanel();
        boardPos1 = new javax.swing.JLabel();
        boardPos2 = new javax.swing.JLabel();
        boardPos3 = new javax.swing.JLabel();
        boardPos4 = new javax.swing.JLabel();
        boardPos5 = new javax.swing.JLabel();
        boardPos6 = new javax.swing.JLabel();
        boardPos7 = new javax.swing.JLabel();
        boardPos8 = new javax.swing.JLabel();
        boardPos9 = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        quitButton = new javax.swing.JButton();
        informationLabel = new javax.swing.JPanel();
        turnIndicatorLabel = new javax.swing.JLabel();
        playerNameLabel = new javax.swing.JLabel();
        versusLabel = new javax.swing.JLabel();
        opponentNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TriquiRMI-WS - Game room");

        titleLabel.setFont(new java.awt.Font("Corbel", 3, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Triqui Game");

        boardPanel.setLayout(new java.awt.GridLayout(3, 3));

        boardPos1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos1MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos1);

        boardPos2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos2MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos2);

        boardPos3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos3MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos3);

        boardPos4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos4MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos4);

        boardPos5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos5MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos5);

        boardPos6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos6MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos6);

        boardPos7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos7MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos7);

        boardPos8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos8MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos8);

        boardPos9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/emptyttt_opt.png"))); // NOI18N
        boardPos9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boardPos9MouseClicked(evt);
            }
        });
        boardPanel.add(boardPos9);

        separator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        quitButton.setText("Leave game");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        informationLabel.setLayout(new java.awt.GridLayout(0, 1));

        turnIndicatorLabel.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        turnIndicatorLabel.setForeground(new java.awt.Color(0, 0, 255));
        turnIndicatorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnIndicatorLabel.setText("Your turn");
        informationLabel.add(turnIndicatorLabel);

        playerNameLabel.setFont(new java.awt.Font("Corbel", 0, 24)); // NOI18N
        playerNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerNameLabel.setText(" ");
        informationLabel.add(playerNameLabel);

        versusLabel.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        versusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        versusLabel.setText("vs.");
        informationLabel.add(versusLabel);

        opponentNameLabel.setFont(new java.awt.Font("Corbel", 0, 24)); // NOI18N
        opponentNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        opponentNameLabel.setText(" ");
        informationLabel.add(opponentNameLabel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(informationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(quitButton)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(separator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(boardPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(informationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        leaveRoom();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void boardPos1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos1MouseClicked
        int i = 0, j = 0;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos1MouseClicked

    private void boardPos2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos2MouseClicked
        int i = 0, j = 1;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos2MouseClicked

    private void boardPos3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos3MouseClicked
        int i = 0, j = 2;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos3MouseClicked

    private void boardPos4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos4MouseClicked
        int i = 1, j = 0;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos4MouseClicked

    private void boardPos5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos5MouseClicked
        int i = 1, j = 1;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos5MouseClicked

    private void boardPos6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos6MouseClicked
        int i = 1, j = 2;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos6MouseClicked

    private void boardPos7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos7MouseClicked
        int i = 2, j = 0;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos7MouseClicked

    private void boardPos8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos8MouseClicked
        int i = 2, j = 1;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos8MouseClicked

    private void boardPos9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardPos9MouseClicked
        int i = 2, j = 2;
        if (player1 != null && player2 != null && board[i][j] == EMPTY_CELL) {
            boolean playedTurn;
            if (triqui.getSeudoname().equals(player1)) playedTurn = true;
            else playedTurn = false;
            triqui.play(player1, playedTurn, i, j);   
        }
    }//GEN-LAST:event_boardPos9MouseClicked

    
    public void setPlayer1(String player1) {
        this.player1 = player1;
        if (player1 != null) playerNameLabel.setText(player1);
        else playerNameLabel.setText(" ");
        if (playerNameLabel.getText().equals(triqui.getSeudoname())) {
            playerNameLabel.setForeground(Color.RED);
            playerNameLabel.setFont(new Font(playerNameLabel.getFont()
                .getName(), Font.BOLD, playerNameLabel.getFont().getSize()));
        }
        else {
            playerNameLabel.setForeground(Color.BLACK);
            playerNameLabel.setFont(new Font(playerNameLabel.getFont()
                .getName(), Font.PLAIN, playerNameLabel.getFont().getSize()));
        }
        
    }
    
    public void setPlayer2(String player2) {
        this.player2 = player2;
        if (player2 != null) opponentNameLabel.setText(player2);
        else opponentNameLabel.setText(" ");
        if (opponentNameLabel.getText().equals(triqui.getSeudoname()))  {
            opponentNameLabel.setForeground(Color.RED);
            opponentNameLabel.setFont(new Font(playerNameLabel.getFont()
                .getName(), Font.BOLD, opponentNameLabel.getFont().getSize()));
        } 
        else {
            opponentNameLabel.setForeground(Color.BLACK);
            opponentNameLabel.setFont(new Font(opponentNameLabel.getFont()
                .getName(), Font.PLAIN, opponentNameLabel.getFont().getSize()));
        }
    }
        
    public void updateLoop() {
        participantsThreadStopped = false;
        boardThreadStopped = false;
        turnThreadStopped = false;
        participantsUpdateThread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (!participantsThreadStopped && triqui.isInsideRoom()) {
                    retrieveParticipants();
                    try {
                        Thread.currentThread().sleep(700);
                    } catch (InterruptedException ex) {
                        System.err.println("Error en thread show "
                            + "participantsUpdate: " + ex.getMessage());
                    }
                }
            }
        });
        participantsUpdateThread.start();
        
        boardUpdateThread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (!boardThreadStopped && triqui.isInsideRoom()) {
                    retrieveBoard();
                    try {
                        Thread.currentThread().sleep(700);
                    } catch (InterruptedException ex) {
                        System.err.println("Error en thread show "
                            + "boardUpdate: " + ex.getMessage());
                    }
                }
            }
        });
        boardUpdateThread.start();
        
        turnUpdateThread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (!turnThreadStopped && triqui.isInsideRoom()) {
                    retrievePlayerInTurn();
                    try {
                        Thread.currentThread().sleep(700);
                    } catch (InterruptedException ex) {
                        System.err.println("Error en thread show "
                            + "turnUpdate: " + ex.getMessage());
                    }
                }
            }
        });
        turnUpdateThread.start();
    }
    
    private void stopUpdateLoop() {
        //participantsThreadStopped = true;
        //boardThreadStopped = true;
        turnThreadStopped = true;
    }
    
    public void retrieveParticipants() {
        String [] players = triqui.getRoomParticipants(player1);
        if (players[0] != null || players[1] != null) {
            setPlayer1(players[0]);
            setPlayer2(players[1]);
        }
        else {
            players = triqui.getRoomParticipants(player2);
            setPlayer1(players[0]);
            setPlayer2(players[1]);
        }
    }
    
    public void retrieveBoard() {
        board = triqui.getGameBoard(player1);
        drawBoard();
    }
    
    public void retrievePlayerInTurn() {
        int turn = triqui.getPlayerInTurn(player1);
        if (turn == 0) {
            turnIndicatorLabel.setText("Waiting for opponent...");
        }
        else if (turn >= 3) {
            if (turn == 5) turnIndicatorLabel.setText("Draw");
            else turnIndicatorLabel.setText((turn == 3 ? "X" : "O") + " wins.");
            showPlayerWinner(turn);
        }
        else {
            if (triqui.getSeudoname().equals(turn == 1 ? player1 : player2)) 
                turnIndicatorLabel.setText("Your turn");
            else
                turnIndicatorLabel.setText("Opponent's turn");
        }
    }
    
    public void showPlayerWinner(int winner) {
        stopUpdateLoop();
        int option;
        if (winner == 5) {
            option = JOptionPane.showOptionDialog(this, "Draw", 
                "Game over", JOptionPane.YES_NO_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, 
                new String[] {"Play again", "Leave room"}, "default");
            
        }
        else if (triqui.getSeudoname().equals(winner == 3 ? player1 : player2)) {
            option = JOptionPane.showOptionDialog(this, "You won!", 
                "Game over", JOptionPane.YES_NO_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, 
                new String[] {"Play again", "Leave room"}, "default");
        }
        else {
            option = JOptionPane.showOptionDialog(this,"Your opponent won!",
                "Game over", JOptionPane.YES_NO_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, 
                new String[] {"Play again", "Leave room"}, "default");
        } 
        if (option == 0) playAgain();
        else leaveRoom();
    }
    
    public void playAgain() {
        triqui.playAgain(player1);
        updateLoop();
    }
    
    public void leaveRoom() {
        triqui.leaveRoom(player1, triqui.getSeudoname());
        try {
            triqui.setInsideRoom(false);
            triqui.showLobbyFrame(this);
            this.dispose();
        } catch (Throwable ex) {
            Logger.getLogger(GameRoom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JLabel boardPos1;
    private javax.swing.JLabel boardPos2;
    private javax.swing.JLabel boardPos3;
    private javax.swing.JLabel boardPos4;
    private javax.swing.JLabel boardPos5;
    private javax.swing.JLabel boardPos6;
    private javax.swing.JLabel boardPos7;
    private javax.swing.JLabel boardPos8;
    private javax.swing.JLabel boardPos9;
    private javax.swing.JPanel informationLabel;
    private javax.swing.JLabel opponentNameLabel;
    private javax.swing.JLabel playerNameLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel turnIndicatorLabel;
    private javax.swing.JLabel versusLabel;
    // End of variables declaration//GEN-END:variables
}
