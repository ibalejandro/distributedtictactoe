/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import triqui.TriquiPlayerGame;

/**
 *
 * @author Santiago
 */
public class TriquiPlayerLobby extends javax.swing.JFrame {
    
    private final TriquiPlayerGame triqui;
    private int matchIndexSelected;
    
    /**
     * Creates new form TriquiPlayerLobby
     */
    public TriquiPlayerLobby() {
        initComponents();
        triqui = new TriquiPlayerGame(this);
        matchIndexSelected = -1;
        ImageIcon image = new ImageIcon(getClass()
            .getResource("/resources/triqui_icon.png"));
        this.setIconImage(image.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        playingAsLabel = new javax.swing.JLabel();
        nicknameLabel = new javax.swing.JLabel();
        joinMatchButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        playersLobbyPanel = new javax.swing.JPanel();
        playersLobbyLabel = new javax.swing.JLabel();
        playersLobbyScrollPane = new javax.swing.JScrollPane();
        playersLobbyList = new javax.swing.JList();
        matchesPanel = new javax.swing.JPanel();
        matchesLabel = new javax.swing.JLabel();
        matchesScrollPane = new javax.swing.JScrollPane();
        matchesList = new javax.swing.JList();
        createMatchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TriquiRMI-WS - Lobby");
        setResizable(false);

        titleLabel.setFont(new java.awt.Font("Corbel", 3, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Triqui");

        playingAsLabel.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        playingAsLabel.setText("Playing as:");

        nicknameLabel.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        nicknameLabel.setText(" ");

        joinMatchButton.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        joinMatchButton.setText("Enter match");
        joinMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinMatchButtonActionPerformed(evt);
            }
        });

        quitButton.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        playersLobbyLabel.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        playersLobbyLabel.setText("Players in lobby");

        playersLobbyList.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        playersLobbyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playersLobbyList.setEnabled(false);
        playersLobbyList.setSelectionBackground(new java.awt.Color(255, 255, 255));
        playersLobbyList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        playersLobbyScrollPane.setViewportView(playersLobbyList);

        javax.swing.GroupLayout playersLobbyPanelLayout = new javax.swing.GroupLayout(playersLobbyPanel);
        playersLobbyPanel.setLayout(playersLobbyPanelLayout);
        playersLobbyPanelLayout.setHorizontalGroup(
            playersLobbyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playersLobbyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playersLobbyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playersLobbyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playersLobbyLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playersLobbyPanelLayout.setVerticalGroup(
            playersLobbyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playersLobbyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playersLobbyLabel)
                .addGap(15, 15, 15)
                .addComponent(playersLobbyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        matchesLabel.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        matchesLabel.setText("Matches");

        matchesList.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        matchesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        matchesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                matchesListValueChanged(evt);
            }
        });
        matchesScrollPane.setViewportView(matchesList);

        javax.swing.GroupLayout matchesPanelLayout = new javax.swing.GroupLayout(matchesPanel);
        matchesPanel.setLayout(matchesPanelLayout);
        matchesPanelLayout.setHorizontalGroup(
            matchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matchesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matchesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matchesLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        matchesPanelLayout.setVerticalGroup(
            matchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matchesPanelLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(matchesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matchesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        createMatchButton.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        createMatchButton.setText("Create match");
        createMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMatchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(playingAsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nicknameLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(playersLobbyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(createMatchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(joinMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(matchesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nicknameLabel)
                    .addComponent(playingAsLabel))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playersLobbyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matchesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(joinMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quitButton)
                    .addComponent(createMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        triqui.logOut();
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void joinMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinMatchButtonActionPerformed
        if (matchesList.getSelectedIndex() != -1) { //No ha seleccionado nada
            String roomJoined = triqui
                .joinRoom((String) matchesList.getSelectedValue());
            if (roomJoined != null) {
                triqui.setInsideRoom(true);
                matchIndexSelected = -1;
                GameRoom gameRoom = new GameRoom(triqui);
                gameRoom.setLocationRelativeTo(this);
                gameRoom.setVisible(true);
                gameRoom.setPlayer1(roomJoined);
                gameRoom.setPlayer2(triqui.getSeudoname());
                gameRoom.updateLoop();
                gameRoom.setResizable(false);
                gameRoom.setIconImage(this.getIconImage());
                this.setVisible(false);
            }
            else {
                JOptionPane.showMessageDialog(this, "The selected room is full,"
                    + " please try another", "Join a match", 
                JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Please, select an available"
                + " room to enter", "Join a match", 
                JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_joinMatchButtonActionPerformed

    private void createMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMatchButtonActionPerformed
        triqui.setInsideRoom(true);
        triqui.createRoom();
        matchIndexSelected = -1;
        GameRoom gameRoom = new GameRoom(triqui);
        gameRoom.setLocationRelativeTo(this);
        gameRoom.setVisible(true);
        gameRoom.setPlayer1(triqui.getSeudoname());
        gameRoom.updateLoop();
        gameRoom.setResizable(false);
        gameRoom.setIconImage(this.getIconImage());
        this.setVisible(false);
    }//GEN-LAST:event_createMatchButtonActionPerformed

    private void matchesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_matchesListValueChanged
        if (matchesList.getSelectedIndex() != -1) {
            matchIndexSelected = matchesList.getSelectedIndex();
        }
    }//GEN-LAST:event_matchesListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TriquiPlayerLobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TriquiPlayerLobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TriquiPlayerLobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TriquiPlayerLobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                final TriquiPlayerLobby triquiLobby = new TriquiPlayerLobby();
                triquiLobby.setLocationRelativeTo(null);
                triquiLobby.setVisible(true);
                triquiLobby.initilizeLobby();
                triquiLobby.updateLoop();
                triquiLobby.setResizable(false);
                triquiLobby.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            }
        });
    }
    
    public void initilizeLobby() {
        String selectedName = SeudonameSelector.selectSeudoname(this, 
                                                SeudonameSelector.NEW_NICKNAME);
        while (selectedName == null || selectedName.equals("-1") ||
               selectedName.equals("-2")) {
            if (selectedName == null) System.exit(0);
            else if (selectedName.equals("-1")) {
                selectedName = SeudonameSelector
                    .selectSeudoname(this, SeudonameSelector.INVALID_NICKNAME);
            }
            else {
                selectedName = SeudonameSelector
                    .selectSeudoname(this, SeudonameSelector.USED_NICKNAME);
            }
        }
        triqui.setSeudoname(selectedName);
        nicknameLabel.setText(selectedName);
    }
    
    private Thread playersUpdateThread;
    
    private Thread roomsUpdateThread;
    
    public void updateLoop() {
        playersUpdateThread = new Thread(new Runnable() {
            @Override
            public void run(){
                while (!triqui.isInsideRoom()) {
                    showPlayers();
                    try {
                        Thread.currentThread().sleep(700);
                    } catch (InterruptedException ex) {
                        System.err.println("Error en thread show "
                            + "players: " + ex.getMessage());
                    }
                }
            }
        });
        playersUpdateThread.start();
        
        roomsUpdateThread = new Thread(new Runnable() {
            @Override
            public void run(){
                while (!triqui.isInsideRoom()) {
                    showRooms();
                    try {
                        Thread.currentThread().sleep(700);
                    } catch (InterruptedException ex) {
                        System.err.println("Error en thread show "
                            + "rooms: " + ex.getMessage());
                    }
                }
            }
        });
        roomsUpdateThread.start();
    }
    
    public void showPlayers() {
        ArrayList<String> players = triqui.getPlayers();
        DefaultListModel newList = new DefaultListModel();
        for (String player : players) {
            newList.addElement(player);
        }
        playersLobbyList.setModel(newList);
    }
    
    
    public void showRooms() {
        ArrayList<String> rooms = triqui.getRooms();
        DefaultListModel newList = new DefaultListModel();
        for (String roomName : rooms) {
            newList.addElement(roomName);
        }
        matchesList.setModel(newList);
        if (matchIndexSelected != -1 && matchIndexSelected < newList.size()) {
            matchesList.setSelectedIndex(matchIndexSelected);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createMatchButton;
    private javax.swing.JButton joinMatchButton;
    private javax.swing.JLabel matchesLabel;
    private javax.swing.JList matchesList;
    private javax.swing.JPanel matchesPanel;
    private javax.swing.JScrollPane matchesScrollPane;
    private javax.swing.JLabel nicknameLabel;
    private javax.swing.JLabel playersLobbyLabel;
    private javax.swing.JList playersLobbyList;
    private javax.swing.JPanel playersLobbyPanel;
    private javax.swing.JScrollPane playersLobbyScrollPane;
    private javax.swing.JLabel playingAsLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
